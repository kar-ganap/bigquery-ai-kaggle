#!/usr/bin/env python3
"""
Force update PMF to histograms by directly editing the JSON while notebook is closed
"""
import json

print("üîÑ Forcing PMF histogram update...")

# Read the notebook
with open('notebooks/demo_competitive_intelligence.ipynb', 'r') as f:
    notebook = json.load(f)

cells = notebook['cells']

# Find the Stage 6 analysis cell with PMF code (cell 37)
stage6_cell = cells[37]  # Direct access to cell 37

print(f"‚úÖ Found cell 37 - checking content...")

# Check if this is the right cell
source = ''.join(stage6_cell['source']) if isinstance(stage6_cell['source'], list) else stage6_cell['source']
if 'VISUAL INTELLIGENCE' in source and 'PMF' in source:
    print("‚úÖ Confirmed this is the Stage 6 Visual Intelligence cell")

    # Create the complete new cell content with histograms
    new_source = [
        "# Visual Intelligence - Competitive Positioning Analysis\n",
        "import pandas as pd\n",
        "from IPython.display import display\n",
        "\n",
        "print(\"üé® VISUAL INTELLIGENCE - COMPETITIVE POSITIONING ANALYSIS\")\n",
        "print(\"=\" * 70)\n",
        "\n",
        "if stage6_results is None:\n",
        "    print(\"‚ùå No visual intelligence results found\")\n",
        "    print(\"   Make sure you ran Stage 6 Visual Intelligence first\")\n",
        "    print(\"   Check the output above for any errors\")\n",
        "else:\n",
        "    try:\n",
        "        from src.utils.bigquery_client import run_query\n",
        "        \n",
        "        # First show basic execution summary\n",
        "        print(\"üìä EXECUTION SUMMARY:\")\n",
        "        print(f\"   üéØ Total ads analyzed: {stage6_results.sampled_ads}\")\n",
        "        print(f\"   üëÅÔ∏è Visual insights generated: {stage6_results.visual_insights}\")\n",
        "        print(f\"   üèÜ Competitive insights: {stage6_results.competitive_insights}\")\n",
        "        print(f\"   üí∞ Estimated cost: ${stage6_results.cost_estimate:.2f}\")\n",
        "        print()\n",
        "        \n",
        "        # Find the visual intelligence table (most recent)\n",
        "        tables_query = \"\"\"\n",
        "        SELECT table_name\n",
        "        FROM `bigquery-ai-kaggle-469620.ads_demo.INFORMATION_SCHEMA.TABLES`\n",
        "        WHERE table_name LIKE 'visual_intelligence_%'\n",
        "        ORDER BY creation_time DESC\n",
        "        LIMIT 1\n",
        "        \"\"\"\n",
        "        \n",
        "        tables_result = run_query(tables_query)\n",
        "        \n",
        "        if not tables_result.empty:\n",
        "            visual_table = tables_result.iloc[0]['table_name']\n",
        "            print(f\"üìã Analyzing table: {visual_table}\")\n",
        "            print()\n",
        "            \n",
        "            # Get competitive positioning matrix\n",
        "            positioning_query = f\"\"\"\n",
        "            SELECT \n",
        "                brand,\n",
        "                COUNT(*) as ads_analyzed,\n",
        "                ROUND(AVG(visual_text_alignment_score), 2) as avg_alignment,\n",
        "                ROUND(AVG(brand_consistency_score), 2) as avg_consistency,\n",
        "                ROUND(AVG(creative_fatigue_risk), 2) as avg_fatigue_risk,\n",
        "                ROUND(AVG(luxury_positioning_score), 2) as avg_luxury_positioning,\n",
        "                ROUND(AVG(boldness_score), 2) as avg_boldness,\n",
        "                ROUND(AVG(visual_differentiation_level), 2) as avg_differentiation\n",
        "            FROM `bigquery-ai-kaggle-469620.ads_demo.{visual_table}`\n",
        "            WHERE visual_text_alignment_score IS NOT NULL\n",
        "            GROUP BY brand\n",
        "            ORDER BY ads_analyzed DESC\n",
        "            \"\"\"\n",
        "            \n",
        "            positioning_result = run_query(positioning_query)\n",
        "            \n",
        "            if not positioning_result.empty:\n",
        "                print(\"üèÜ COMPETITIVE POSITIONING MATRIX\")\n",
        "                print(\"Visual strategy analysis across all competitors:\")\n",
        "                print()\n",
        "                \n",
        "                # Create positioning DataFrame\n",
        "                pos_df = positioning_result[['brand', 'ads_analyzed', 'avg_alignment', 'avg_consistency', \n",
        "                                           'avg_fatigue_risk', 'avg_luxury_positioning', 'avg_boldness', \n",
        "                                           'avg_differentiation']].copy()\n",
        "                \n",
        "                pos_df.columns = ['Brand', 'Ads', 'Alignment', 'Consistency', 'Fatigue Risk', \n",
        "                                'Luxury Score', 'Boldness', 'Uniqueness']\n",
        "                \n",
        "                display(pos_df)\n",
        "                \n",
        "                print(\"\\nüìä METRIC EXPLANATIONS:\")\n",
        "                print(\"‚Ä¢ Alignment (0-1): How well visuals match text messaging\")\n",
        "                print(\"‚Ä¢ Consistency (0-1): Visual brand coherence across campaigns\")\n",
        "                print(\"‚Ä¢ Fatigue Risk (0-1): How stale/overused the creative feels\")\n",
        "                print(\"‚Ä¢ Luxury Score (0-1): 0=accessible/mass market, 1=luxury/premium\")\n",
        "                print(\"‚Ä¢ Boldness (0-1): 0=subtle/conservative, 1=bold/attention-grabbing\")\n",
        "                print(\"‚Ä¢ Uniqueness (0-1): How differentiated vs category-standard\")\n",
        "                \n",
        "                # Competitive insights\n",
        "                print(\"\\nüéØ KEY COMPETITIVE INSIGHTS:\")\n",
        "                \n",
        "                # Find top performers in each category\n",
        "                max_luxury = positioning_result.loc[positioning_result['avg_luxury_positioning'].idxmax()]\n",
        "                max_bold = positioning_result.loc[positioning_result['avg_boldness'].idxmax()]\n",
        "                max_unique = positioning_result.loc[positioning_result['avg_differentiation'].idxmax()]\n",
        "                max_consistent = positioning_result.loc[positioning_result['avg_consistency'].idxmax()]\n",
        "                \n",
        "                print(f\"üíé Most Premium Positioning: {max_luxury['brand']} ({max_luxury['avg_luxury_positioning']})\")\n",
        "                print(f\"üî• Most Bold Visual Approach: {max_bold['brand']} ({max_bold['avg_boldness']})\")\n",
        "                print(f\"‚≠ê Most Visually Unique: {max_unique['brand']} ({max_unique['avg_differentiation']})\")\n",
        "                print(f\"üèÜ Most Brand Consistent: {max_consistent['brand']} ({max_consistent['avg_consistency']})\")\n",
        "                \n",
        "                print(\"\\n‚úÖ MULTIMODAL AI ANALYSIS COMPLETE!\")\n",
        "                print(\"üéØ This reveals competitive visual positioning that text analysis alone cannot capture.\")\n",
        "                print(\"üí° Use these insights to identify visual differentiation opportunities and threats.\")\n",
        "                \n",
        "                # PMF VISUALIZATION & MODAL ANALYSIS - NOW WITH HISTOGRAMS!\n",
        "                print(\"\\nüìä PROBABILITY MASS FUNCTIONS (PMF) - HISTOGRAM VISUALIZATIONS\")\n",
        "                print(\"Visual comparison across brands (only showing used categories):\")\n",
        "                print()\n",
        "                \n",
        "                import matplotlib.pyplot as plt\n",
        "                import seaborn as sns\n",
        "                import numpy as np\n",
        "                \n",
        "                # Set up plotting style\n",
        "                plt.style.use('default')\n",
        "                sns.set_palette('husl')\n",
        "                \n",
        "                # Get demographic PMF data (only used categories)\n",
        "                pmf_demo_query = f\"\"\"\n",
        "                WITH used_demographics AS (\n",
        "                  SELECT DISTINCT target_demographic \n",
        "                  FROM `bigquery-ai-kaggle-469620.ads_demo.{visual_table}`\n",
        "                  WHERE target_demographic IS NOT NULL\n",
        "                )\n",
        "                SELECT \n",
        "                    brand,\n",
        "                    target_demographic,\n",
        "                    COUNT(*) as count,\n",
        "                    COUNT(*) * 100.0 / SUM(COUNT(*)) OVER (PARTITION BY brand) as percentage\n",
        "                FROM `bigquery-ai-kaggle-469620.ads_demo.{visual_table}`\n",
        "                WHERE target_demographic IS NOT NULL\n",
        "                GROUP BY brand, target_demographic\n",
        "                ORDER BY brand, percentage DESC\n",
        "                \"\"\"\n",
        "                \n",
        "                pmf_demo_result = run_query(pmf_demo_query)\n",
        "                \n",
        "                if not pmf_demo_result.empty:\n",
        "                    # Get only used demographic buckets\n",
        "                    used_demographics = sorted(pmf_demo_result['target_demographic'].unique())\n",
        "                    brands = sorted(pmf_demo_result['brand'].unique())\n",
        "                    \n",
        "                    print(\"üéØ DEMOGRAPHIC PMF HISTOGRAM:\")\n",
        "                    print(f\"(Targeting distribution across {len(used_demographics)} active demographic segments)\")\n",
        "                    print()\n",
        "                    \n",
        "                    # Create demographic PMF histogram\n",
        "                    fig, ax = plt.subplots(figsize=(12, 6))\n",
        "                    \n",
        "                    # Prepare data for grouped bar chart\n",
        "                    x = np.arange(len(used_demographics))\n",
        "                    width = 0.8 / len(brands)\n",
        "                    \n",
        "                    for i, brand in enumerate(brands):\n",
        "                        brand_data = pmf_demo_result[pmf_demo_result['brand'] == brand]\n",
        "                        percentages = []\n",
        "                        \n",
        "                        for demo in used_demographics:\n",
        "                            demo_row = brand_data[brand_data['target_demographic'] == demo]\n",
        "                            percentage = demo_row['percentage'].iloc[0] if not demo_row.empty else 0.0\n",
        "                            percentages.append(percentage)\n",
        "                        \n",
        "                        ax.bar(x + i * width, percentages, width, label=brand, alpha=0.8)\n",
        "                    \n",
        "                    ax.set_xlabel('Target Demographics')\n",
        "                    ax.set_ylabel('Probability Mass (%)')\n",
        "                    ax.set_title('Demographic PMF by Brand')\n",
        "                    ax.set_xticks(x + width * (len(brands) - 1) / 2)\n",
        "                    ax.set_xticklabels(used_demographics, rotation=45, ha='right')\n",
        "                    ax.legend()\n",
        "                    ax.grid(True, alpha=0.3)\n",
        "                    \n",
        "                    plt.tight_layout()\n",
        "                    plt.show()\n",
        "                    \n",
        "                    # Also show the data table for reference\n",
        "                    demo_pmf_data = []\n",
        "                    for brand in brands:\n",
        "                        brand_data = pmf_demo_result[pmf_demo_result['brand'] == brand]\n",
        "                        row = {'Brand': brand}\n",
        "                        \n",
        "                        for demo in used_demographics:\n",
        "                            demo_row = brand_data[brand_data['target_demographic'] == demo]\n",
        "                            percentage = demo_row['percentage'].iloc[0] if not demo_row.empty else 0.0\n",
        "                            row[demo] = f\"{percentage:.1f}%\"\n",
        "                        \n",
        "                        demo_pmf_data.append(row)\n",
        "                    \n",
        "                    # Create DataFrame for demographic PMF\n",
        "                    demo_pmf_df = pd.DataFrame(demo_pmf_data)\n",
        "                    demo_pmf_df = demo_pmf_df.set_index('Brand')\n",
        "                    print(\"\\nüìã Demographic PMF Data Table:\")\n",
        "                    display(demo_pmf_df)\n",
        "                    \n",
        "                    # Get visual style PMF data (separate visualization)\n",
        "                    pmf_style_query = f\"\"\"\n",
        "                    SELECT \n",
        "                        brand,\n",
        "                        visual_style,\n",
        "                        COUNT(*) as count,\n",
        "                        COUNT(*) * 100.0 / SUM(COUNT(*)) OVER (PARTITION BY brand) as percentage\n",
        "                    FROM `bigquery-ai-kaggle-469620.ads_demo.{visual_table}`\n",
        "                    WHERE visual_style IS NOT NULL\n",
        "                    GROUP BY brand, visual_style\n",
        "                    ORDER BY brand, percentage DESC\n",
        "                    \"\"\"\n",
        "                    \n",
        "                    pmf_style_result = run_query(pmf_style_query)\n",
        "                    \n",
        "                    if not pmf_style_result.empty:\n",
        "                        print(\"\\nüé® VISUAL STYLE PMF HISTOGRAM:\")\n",
        "                        \n",
        "                        # Get only used style buckets\n",
        "                        used_styles = sorted(pmf_style_result['visual_style'].unique())\n",
        "                        print(f\"(Style distribution across {len(used_styles)} active visual approaches)\")\n",
        "                        print()\n",
        "                        \n",
        "                        # Create style PMF histogram\n",
        "                        fig, ax = plt.subplots(figsize=(12, 6))\n",
        "                        \n",
        "                        # Prepare data for grouped bar chart\n",
        "                        x = np.arange(len(used_styles))\n",
        "                        width = 0.8 / len(brands)\n",
        "                        \n",
        "                        for i, brand in enumerate(brands):\n",
        "                            brand_data = pmf_style_result[pmf_style_result['brand'] == brand]\n",
        "                            percentages = []\n",
        "                            \n",
        "                            for style in used_styles:\n",
        "                                style_row = brand_data[brand_data['visual_style'] == style]\n",
        "                                percentage = style_row['percentage'].iloc[0] if not style_row.empty else 0.0\n",
        "                                percentages.append(percentage)\n",
        "                            \n",
        "                            ax.bar(x + i * width, percentages, width, label=brand, alpha=0.8)\n",
        "                        \n",
        "                        ax.set_xlabel('Visual Styles')\n",
        "                        ax.set_ylabel('Probability Mass (%)')\n",
        "                        ax.set_title('Visual Style PMF by Brand')\n",
        "                        ax.set_xticks(x + width * (len(brands) - 1) / 2)\n",
        "                        ax.set_xticklabels(used_styles, rotation=45, ha='right')\n",
        "                        ax.legend()\n",
        "                        ax.grid(True, alpha=0.3)\n",
        "                        \n",
        "                        plt.tight_layout()\n",
        "                        plt.show()\n",
        "                        \n",
        "                        # Style PMF data table\n",
        "                        style_pmf_data = []\n",
        "                        for brand in brands:\n",
        "                            brand_data = pmf_style_result[pmf_style_result['brand'] == brand]\n",
        "                            row = {'Brand': brand}\n",
        "                            \n",
        "                            for style in used_styles:\n",
        "                                style_row = brand_data[brand_data['visual_style'] == style]\n",
        "                                percentage = style_row['percentage'].iloc[0] if not style_row.empty else 0.0\n",
        "                                row[style] = f\"{percentage:.1f}%\"\n",
        "                            \n",
        "                            style_pmf_data.append(row)\n",
        "                        \n",
        "                        # Create DataFrame for style PMF\n",
        "                        style_pmf_df = pd.DataFrame(style_pmf_data)\n",
        "                        style_pmf_df = style_pmf_df.set_index('Brand')\n",
        "                        print(\"\\nüìã Visual Style PMF Data Table:\")\n",
        "                        display(style_pmf_df)\n",
        "                    \n",
        "                    # MODAL ANALYSIS - Most common demographic and style per brand\n",
        "                    print(\"\\nüìã MODAL ANALYSIS - PRIMARY TARGET & STYLE PER BRAND\")\n",
        "                    \n",
        "                    modal_query = f\"\"\"\n",
        "                    WITH brand_modes AS (\n",
        "                      SELECT \n",
        "                        brand,\n",
        "                        -- Most common demographic\n",
        "                        ARRAY_AGG(target_demographic ORDER BY demo_count DESC LIMIT 1)[OFFSET(0)] as primary_demographic,\n",
        "                        MAX(demo_count) as demo_count,\n",
        "                        -- Most common visual style\n",
        "                        ARRAY_AGG(visual_style ORDER BY style_count DESC LIMIT 1)[OFFSET(0)] as primary_style,\n",
        "                        MAX(style_count) as style_count,\n",
        "                        COUNT(*) as total_ads\n",
        "                      FROM (\n",
        "                        SELECT \n",
        "                          brand,\n",
        "                          target_demographic,\n",
        "                          visual_style,\n",
        "                          COUNT(*) OVER (PARTITION BY brand, target_demographic) as demo_count,\n",
        "                          COUNT(*) OVER (PARTITION BY brand, visual_style) as style_count\n",
        "                        FROM `bigquery-ai-kaggle-469620.ads_demo.{visual_table}`\n",
        "                        WHERE target_demographic IS NOT NULL AND visual_style IS NOT NULL\n",
        "                      )\n",
        "                      GROUP BY brand\n",
        "                    )\n",
        "                    SELECT \n",
        "                      brand,\n",
        "                      primary_demographic,\n",
        "                      ROUND(demo_count * 100.0 / total_ads, 1) as demo_percentage,\n",
        "                      primary_style,\n",
        "                      ROUND(style_count * 100.0 / total_ads, 1) as style_percentage,\n",
        "                      total_ads\n",
        "                    FROM brand_modes\n",
        "                    ORDER BY total_ads DESC\n",
        "                    \"\"\"\n",
        "                    \n",
        "                    modal_result = run_query(modal_query)\n",
        "                    \n",
        "                    if not modal_result.empty:\n",
        "                        modal_df = modal_result[['brand', 'primary_demographic', 'demo_percentage', \n",
        "                                               'primary_style', 'style_percentage', 'total_ads']].copy()\n",
        "                        modal_df.columns = ['Brand', 'Primary Demographic', 'Demo %', \n",
        "                                          'Primary Style', 'Style %', 'Total Ads']\n",
        "                        \n",
        "                        display(modal_df)\n",
        "                        \n",
        "                        print(\"\\nüéØ KEY MODAL INSIGHTS:\")\n",
        "                        for _, row in modal_result.iterrows():\n",
        "                            print(f\"‚Ä¢ {row['brand']}: {row['demo_percentage']:.1f}% {row['primary_demographic']}, {row['style_percentage']:.1f}% {row['primary_style']}\")\n",
        "                \n",
        "                print(\"\\n‚úÖ ENHANCED PMF HISTOGRAM ANALYSIS COMPLETE!\")\n",
        "                print(\"üìä Proper PMF histograms showing probability distributions\")\n",
        "                print(\"üéØ Grouped bar charts for easy brand comparison\")\n",
        "                print(\"üìã Supporting data tables for exact values\")\n",
        "                print(\"üí° Use histograms to spot distribution patterns and competitive gaps\")\n",
        "                \n",
        "            else:\n",
        "                print(\"‚ö†Ô∏è Visual intelligence table exists but contains no processed insights\")\n",
        "                \n",
        "        else:\n",
        "            print(\"‚ö†Ô∏è No visual intelligence table found\")\n",
        "            print(\"   The visual analysis may have failed or not completed yet\")\n",
        "            \n",
        "    except Exception as e:\n",
        "        print(f\"‚ö†Ô∏è Could not analyze visual intelligence results: {e}\")\n",
        "        print(\"   Falling back to basic summary...\")\n",
        "        print(f\"   üéØ Total ads analyzed: {stage6_results.sampled_ads}\")\n",
        "        print(f\"   üí∞ Estimated cost: ${stage6_results.cost_estimate:.2f}\")"
    ]

    # Replace the entire cell content
    stage6_cell['source'] = new_source

    # Update the notebook
    notebook['cells'] = cells

    # Write back
    with open('notebooks/demo_competitive_intelligence.ipynb', 'w') as f:
        json.dump(notebook, f, indent=1)

    print("‚úÖ Successfully updated cell 37 with PMF histograms!")
    print("üìä Added proper matplotlib histograms for demographic and visual style PMFs")
    print("üéØ Grouped bar charts show competitive distribution patterns")
    print("üìã Supporting data tables provide exact percentage values")

else:
    print("‚ùå Cell 37 does not contain the expected Visual Intelligence content")
    print("Content preview:", source[:200], "...")