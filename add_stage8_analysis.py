#!/usr/bin/env python3
"""
Add comprehensive Stage 8 analysis cell to the notebook
"""
import json

# Read the notebook
with open('notebooks/demo_competitive_intelligence.ipynb', 'r') as f:
    notebook = json.load(f)

# Create the new comprehensive analysis cell
new_cell = {
    "cell_type": "code",
    "execution_count": None,
    "id": "stage8_deep_analysis",
    "metadata": {},
    "outputs": [],
    "source": [
        "# === STAGE 8 DEEP DIVE: COMPETITIVE POSITIONING ANALYSIS ===\n",
        "\n",
        "if 'stage8_results' in locals() and stage8_results is not None:\n",
        "    print(\"üîç === COMPREHENSIVE COMPETITIVE INTELLIGENCE ANALYSIS ===\")\n",
        "    print(\"=\" * 70)\n",
        "    \n",
        "    # Import required libraries for analysis and visualization\n",
        "    import pandas as pd\n",
        "    import numpy as np\n",
        "    from src.utils.bigquery_client import run_query\n",
        "    import os\n",
        "    \n",
        "    BQ_PROJECT = os.environ.get(\"BQ_PROJECT\", \"bigquery-ai-kaggle-469620\")\n",
        "    BQ_DATASET = os.environ.get(\"BQ_DATASET\", \"ads_demo\")\n",
        "    \n",
        "    print(f\"\\nüìä 1. COMPETITIVE POSITIONING MATRIX\")\n",
        "    print(\"=\" * 50)\n",
        "    \n",
        "    # Get comprehensive brand comparison from CTA analysis\n",
        "    try:\n",
        "        brand_positioning_query = f\"\"\"\n",
        "        SELECT \n",
        "            brand,\n",
        "            total_ads,\n",
        "            ROUND((high_urgency_ctas * 10.0 + medium_engagement_ctas * 6.0 + consultative_ctas * 3.0 + low_pressure_ctas * 1.0) / GREATEST(total_ads, 1), 2) as avg_cta_aggressiveness,\n",
        "            cta_adoption_rate,\n",
        "            high_urgency_ctas as high_pressure_ads,\n",
        "            medium_engagement_ctas as medium_engagement_ads,\n",
        "            consultative_ctas as consultative_ads,\n",
        "            low_pressure_ctas as low_pressure_ads,\n",
        "            \n",
        "            -- Competitive positioning metrics\n",
        "            RANK() OVER (ORDER BY (high_urgency_ctas * 10.0 + medium_engagement_ctas * 6.0 + consultative_ctas * 3.0 + low_pressure_ctas * 1.0) / GREATEST(total_ads, 1) DESC) as aggressiveness_rank,\n",
        "            PERCENTILE_CONT((high_urgency_ctas * 10.0 + medium_engagement_ctas * 6.0 + consultative_ctas * 3.0 + low_pressure_ctas * 1.0) / GREATEST(total_ads, 1), 0.5) OVER (PARTITION BY 1) as market_median_aggressiveness,\n",
        "            \n",
        "            -- Market position indicators\n",
        "            CASE \n",
        "                WHEN (high_urgency_ctas * 10.0 + medium_engagement_ctas * 6.0 + consultative_ctas * 3.0 + low_pressure_ctas * 1.0) / GREATEST(total_ads, 1) > 8.0 THEN 'ULTRA_AGGRESSIVE'\n",
        "                WHEN (high_urgency_ctas * 10.0 + medium_engagement_ctas * 6.0 + consultative_ctas * 3.0 + low_pressure_ctas * 1.0) / GREATEST(total_ads, 1) > 6.0 THEN 'AGGRESSIVE'\n",
        "                WHEN (high_urgency_ctas * 10.0 + medium_engagement_ctas * 6.0 + consultative_ctas * 3.0 + low_pressure_ctas * 1.0) / GREATEST(total_ads, 1) > 4.0 THEN 'MODERATE'\n",
        "                ELSE 'CONSERVATIVE'\n",
        "            END as market_position\n",
        "            \n",
        "        FROM `{BQ_PROJECT}.{BQ_DATASET}.cta_aggressiveness_analysis`\n",
        "        ORDER BY avg_cta_aggressiveness DESC\n",
        "        \"\"\"\n",
        "        \n",
        "        positioning_df = run_query(brand_positioning_query)\n",
        "        \n",
        "        if not positioning_df.empty:\n",
        "            print(f\"   üìà Brand Competitive Rankings:\")\n",
        "            for _, row in positioning_df.iterrows():\n",
        "                target_indicator = \"üéØ\" if row['brand'] == context.brand else \"üî∏\"\n",
        "                print(f\"   {target_indicator} #{row['aggressiveness_rank']:0.0f} {row['brand']}: {row['avg_cta_aggressiveness']:.1f}/10 ({row['market_position']})\")\n",
        "                print(f\"      üìä {row['total_ads']} ads, {row['cta_adoption_rate']*100:.1f}% CTA adoption\")\n",
        "            \n",
        "            # Target brand analysis\n",
        "            target_row = positioning_df[positioning_df['brand'] == context.brand]\n",
        "            if not target_row.empty:\n",
        "                target_data = target_row.iloc[0]\n",
        "                market_median = target_data['market_median_aggressiveness']\n",
        "                brand_score = target_data['avg_cta_aggressiveness']\n",
        "                \n",
        "                print(f\"\\n   üéØ {context.brand} COMPETITIVE POSITION:\")\n",
        "                print(f\"      Rank: #{target_data['aggressiveness_rank']:0.0f} of {len(positioning_df)} brands\")\n",
        "                print(f\"      Score: {brand_score:.2f}/10 (Market median: {market_median:.2f})\")\n",
        "                print(f\"      Position: {target_data['market_position']}\")\n",
        "                \n",
        "                if brand_score > market_median + 1.0:\n",
        "                    print(f\"      üìà SIGNIFICANTLY MORE AGGRESSIVE than market\")\n",
        "                elif brand_score > market_median:\n",
        "                    print(f\"      üìä ABOVE MARKET average aggressiveness\")\n",
        "                elif brand_score < market_median - 1.0:\n",
        "                    print(f\"      üìâ SIGNIFICANTLY LESS AGGRESSIVE than market\")\n",
        "                else:\n",
        "                    print(f\"      üìç ALIGNED WITH MARKET average\")\n",
        "                    \n",
        "    except Exception as e:\n",
        "        print(f\"   ‚ö†Ô∏è Error in positioning analysis: {e}\")\n",
        "    \n",
        "    print(f\"\\nüìä 2. STRATEGIC RECOMMENDATIONS & INTERVENTIONS\")\n",
        "    print(\"=\" * 50)\n",
        "    \n",
        "    # Generate strategic recommendations based on the analysis\n",
        "    current_state = stage8_results.current_state\n",
        "    influence = stage8_results.influence\n",
        "    \n",
        "    print(f\"   üéØ IMMEDIATE TACTICAL RECOMMENDATIONS:\")\n",
        "    \n",
        "    # CTA Strategy Recommendations\n",
        "    cta_score = current_state.get('avg_cta_aggressiveness', 0)\n",
        "    if cta_score > 8.0:\n",
        "        print(f\"   üìà CTA STRATEGY: Consider moderating ultra-aggressive approach\")\n",
        "        print(f\"      Risk: Potential customer fatigue from high-pressure tactics\")\n",
        "        print(f\"      Current score: {cta_score:.1f}/10 - Above market threshold\")\n",
        "    elif cta_score < 4.0:\n",
        "        print(f\"   üìà CTA STRATEGY: Opportunity to increase call-to-action intensity\")\n",
        "        print(f\"      Opportunity: More aggressive CTAs could drive higher conversion\")\n",
        "        print(f\"      Current score: {cta_score:.1f}/10 - Below market threshold\")\n",
        "    else:\n",
        "        print(f\"   üìà CTA STRATEGY: Current aggressiveness level is well-positioned\")\n",
        "        print(f\"      Current score: {cta_score:.1f}/10 - Optimal range\")\n",
        "    \n",
        "    # Fatigue-based Recommendations\n",
        "    fatigue_score = current_state.get('avg_fatigue_score', 0)\n",
        "    if fatigue_score > 0.6:\n",
        "        print(f\"   üé® CREATIVE STRATEGY: URGENT - Creative refresh needed\")\n",
        "        print(f\"      Action: Develop new creative angles and messaging approaches\")\n",
        "        print(f\"      Fatigue level: {fatigue_score:.3f} - HIGH risk\")\n",
        "    elif fatigue_score > 0.4:\n",
        "        print(f\"   üé® CREATIVE STRATEGY: Monitor creative performance closely\")\n",
        "        print(f\"      Action: Test new creative variations in upcoming campaigns\")\n",
        "        print(f\"      Fatigue level: {fatigue_score:.3f} - MEDIUM risk\")\n",
        "    else:\n",
        "        print(f\"   üé® CREATIVE STRATEGY: Creative freshness is strong\")\n",
        "        print(f\"      Fatigue level: {fatigue_score:.3f} - LOW risk\")\n",
        "    \n",
        "    # Copying-based Recommendations\n",
        "    if influence.get('copying_detected', False):\n",
        "        similarity_score = influence.get('similarity_score', 0)\n",
        "        copier = influence.get('top_copier', 'Unknown')\n",
        "        if similarity_score > 0.7:\n",
        "            print(f\"   ‚ö†Ô∏è COMPETITIVE THREAT: HIGH similarity with {copier}\")\n",
        "            print(f\"      Action: Immediate differentiation strategy required\")\n",
        "            print(f\"      Similarity: {similarity_score:.3f} - CRITICAL level\")\n",
        "        else:\n",
        "            print(f\"   üìä COMPETITIVE MONITORING: Moderate similarity with {copier}\")\n",
        "            print(f\"      Action: Monitor and track competitive developments\")\n",
        "            print(f\"      Similarity: {similarity_score:.3f} - MODERATE level\")\n",
        "    else:\n",
        "        print(f\"   ‚úÖ COMPETITIVE POSITION: No significant copying detected\")\n",
        "        print(f\"      Status: Creative differentiation is effective\")\n",
        "    \n",
        "    # Market Position Summary\n",
        "    market_position = current_state.get('market_position', 'unknown')\n",
        "    print(f\"\\n   üèÅ STRATEGIC POSITIONING SUMMARY:\")\n",
        "    print(f\"      Current Position: {market_position.upper()}\")\n",
        "    print(f\"      Promotional Intensity: {current_state.get('promotional_intensity', 0):.3f}\")\n",
        "    print(f\"      Brand Voice Consistency: {current_state.get('brand_voice_score', 0):.3f}\")\n",
        "    print(f\"      Market Volatility: {current_state.get('promotional_volatility', 0):.3f}\")\n",
        "    \n",
        "    # Quantified Business Impact\n",
        "    print(f\"\\n   üíº QUANTIFIED BUSINESS IMPACT:\")\n",
        "    if cta_score > 8.0 and fatigue_score > 0.5:\n",
        "        print(f\"      ‚ö†Ô∏è HIGH RISK: Aggressive CTAs + High Fatigue = Potential customer alienation\")\n",
        "        print(f\"      üìâ Recommendation: Reduce CTA pressure AND refresh creative\")\n",
        "    elif cta_score > 8.0:\n",
        "        print(f\"      üìä MODERATE RISK: Ultra-aggressive CTAs may cause customer fatigue\")\n",
        "        print(f\"      üìà Recommendation: Test moderate CTA variations\")\n",
        "    elif fatigue_score > 0.5:\n",
        "        print(f\"      üìä CREATIVE RISK: High creative fatigue may reduce effectiveness\")\n",
        "        print(f\"      üé® Recommendation: Prioritize creative refresh initiatives\")\n",
        "    else:\n",
        "        print(f\"      ‚úÖ OPTIMAL POSITION: Balanced aggressiveness and creative freshness\")\n",
        "        print(f\"      üìà Recommendation: Maintain current strategy with minor optimizations\")\n",
        "    \n",
        "    print(f\"\\nüìä 3. DATA-DRIVEN COMPETITIVE VISUALIZATIONS\")\n",
        "    print(\"=\" * 50)\n",
        "    \n",
        "    # Import visualization libraries\n",
        "    try:\n",
        "        import matplotlib.pyplot as plt\n",
        "        import seaborn as sns\n",
        "        \n",
        "        # Set style for better-looking plots\n",
        "        plt.style.use('default')\n",
        "        \n",
        "        print(f\"   üìà Generating competitive intelligence visualizations...\")\n",
        "        \n",
        "        # === VISUALIZATION 1: CTA AGGRESSIVENESS COMPETITIVE MATRIX ===\n",
        "        if not positioning_df.empty:\n",
        "            print(f\"\\n   üéØ 1. CTA Aggressiveness Competitive Matrix\")\n",
        "            \n",
        "            # Create competitive matrix scatter plot\n",
        "            fig, ax = plt.subplots(figsize=(12, 8))\n",
        "            \n",
        "            # Scatter plot with brand positioning\n",
        "            colors = ['#ff6b6b' if brand == context.brand else '#4ecdc4' for brand in positioning_df['brand']]\n",
        "            sizes = [200 if brand == context.brand else 100 for brand in positioning_df['brand']]\n",
        "            \n",
        "            scatter = ax.scatter(positioning_df['cta_adoption_rate'] * 100, \n",
        "                                positioning_df['avg_cta_aggressiveness'],\n",
        "                                c=colors, s=sizes, alpha=0.7, edgecolors='black', linewidth=1)\n",
        "            \n",
        "            # Add brand labels\n",
        "            for i, row in positioning_df.iterrows():\n",
        "                ax.annotate(row['brand'], \n",
        "                           (row['cta_adoption_rate'] * 100, row['avg_cta_aggressiveness']),\n",
        "                           xytext=(5, 5), textcoords='offset points', \n",
        "                           fontsize=10, fontweight='bold' if row['brand'] == context.brand else 'normal')\n",
        "            \n",
        "            # Add market median lines\n",
        "            market_median = positioning_df['market_median_aggressiveness'].iloc[0]\n",
        "            median_adoption = positioning_df['cta_adoption_rate'].median() * 100\n",
        "            \n",
        "            ax.axhline(y=market_median, color='gray', linestyle='--', alpha=0.5, label=f'Market Median Aggressiveness ({market_median:.1f})')\n",
        "            ax.axvline(x=median_adoption, color='gray', linestyle='--', alpha=0.5, label=f'Market Median Adoption ({median_adoption:.1f}%)')\n",
        "            \n",
        "            ax.set_xlabel('CTA Adoption Rate (%)', fontsize=12, fontweight='bold')\n",
        "            ax.set_ylabel('CTA Aggressiveness Score', fontsize=12, fontweight='bold')\n",
        "            ax.set_title(f'Competitive CTA Strategy Matrix\\n{context.brand} vs Competitors', fontsize=14, fontweight='bold', pad=20)\n",
        "            ax.legend()\n",
        "            ax.grid(True, alpha=0.3)\n",
        "            \n",
        "            plt.tight_layout()\n",
        "            plt.show()\n",
        "            \n",
        "            # === VISUALIZATION 2: CTA STRATEGY DISTRIBUTION ===\n",
        "            print(f\"\\n   üìä 2. CTA Strategy Distribution Comparison\")\n",
        "            \n",
        "            # Create stacked bar chart for CTA strategies\n",
        "            fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(16, 6))\n",
        "            \n",
        "            # Left plot: Absolute numbers\n",
        "            brands = positioning_df['brand']\n",
        "            high_pressure = positioning_df['high_pressure_ads']\n",
        "            medium_engagement = positioning_df['medium_engagement_ads']\n",
        "            consultative = positioning_df['consultative_ads']\n",
        "            low_pressure = positioning_df['low_pressure_ads']\n",
        "            \n",
        "            width = 0.6\n",
        "            x = range(len(brands))\n",
        "            \n",
        "            ax1.bar(x, high_pressure, width, label='High Urgency', color='#ff4757', alpha=0.8)\n",
        "            ax1.bar(x, medium_engagement, width, bottom=high_pressure, label='Medium Engagement', color='#ffa502', alpha=0.8)\n",
        "            ax1.bar(x, consultative, width, bottom=high_pressure+medium_engagement, label='Consultative', color='#3742fa', alpha=0.8)\n",
        "            ax1.bar(x, low_pressure, width, bottom=high_pressure+medium_engagement+consultative, label='Low Pressure', color='#2ed573', alpha=0.8)\n",
        "            \n",
        "            ax1.set_xlabel('Brands', fontweight='bold')\n",
        "            ax1.set_ylabel('Number of Ads', fontweight='bold')\n",
        "            ax1.set_title('CTA Strategy Distribution (Absolute)', fontweight='bold')\n",
        "            ax1.set_xticks(x)\n",
        "            ax1.set_xticklabels(brands, rotation=45, ha='right')\n",
        "            ax1.legend()\n",
        "            \n",
        "            # Right plot: Percentages\n",
        "            totals = positioning_df['total_ads']\n",
        "            high_pct = (high_pressure / totals * 100)\n",
        "            medium_pct = (medium_engagement / totals * 100)\n",
        "            consult_pct = (consultative / totals * 100)\n",
        "            low_pct = (low_pressure / totals * 100)\n",
        "            \n",
        "            ax2.bar(x, high_pct, width, label='High Urgency', color='#ff4757', alpha=0.8)\n",
        "            ax2.bar(x, medium_pct, width, bottom=high_pct, label='Medium Engagement', color='#ffa502', alpha=0.8)\n",
        "            ax2.bar(x, consult_pct, width, bottom=high_pct+medium_pct, label='Consultative', color='#3742fa', alpha=0.8)\n",
        "            ax2.bar(x, low_pct, width, bottom=high_pct+medium_pct+consult_pct, label='Low Pressure', color='#2ed573', alpha=0.8)\n",
        "            \n",
        "            ax2.set_xlabel('Brands', fontweight='bold')\n",
        "            ax2.set_ylabel('Percentage of Ads (%)', fontweight='bold')\n",
        "            ax2.set_title('CTA Strategy Distribution (Percentage)', fontweight='bold')\n",
        "            ax2.set_xticks(x)\n",
        "            ax2.set_xticklabels(brands, rotation=45, ha='right')\n",
        "            ax2.legend()\n",
        "            \n",
        "            plt.tight_layout()\n",
        "            plt.show()\n",
        "            \n",
        "            # === VISUALIZATION 3: AGGRESSIVENESS RANKING ===\n",
        "            print(f\"\\n   üèÜ 3. Brand Aggressiveness Ranking\")\n",
        "            \n",
        "            # Create horizontal bar chart for rankings\n",
        "            fig, ax = plt.subplots(figsize=(12, 8))\n",
        "            \n",
        "            # Sort by aggressiveness score\n",
        "            sorted_df = positioning_df.sort_values('avg_cta_aggressiveness', ascending=True)\n",
        "            \n",
        "            # Create color map - target brand in red, others in blue gradient\n",
        "            colors = ['#ff6b6b' if brand == context.brand else '#4ecdc4' for brand in sorted_df['brand']]\n",
        "            \n",
        "            bars = ax.barh(range(len(sorted_df)), sorted_df['avg_cta_aggressiveness'], color=colors, alpha=0.7, edgecolor='black', linewidth=1)\n",
        "            \n",
        "            # Add score labels on bars\n",
        "            for i, (idx, row) in enumerate(sorted_df.iterrows()):\n",
        "                ax.text(row['avg_cta_aggressiveness'] + 0.1, i, f\"{row['avg_cta_aggressiveness']:.1f}\", \n",
        "                       va='center', fontweight='bold', fontsize=10)\n",
        "            \n",
        "            # Add market position labels\n",
        "            ax.set_yticks(range(len(sorted_df)))\n",
        "            labels = [f\"#{row['aggressiveness_rank']:.0f} {row['brand']}\\n({row['market_position']})\" for _, row in sorted_df.iterrows()]\n",
        "            ax.set_yticklabels(labels)\n",
        "            \n",
        "            ax.set_xlabel('CTA Aggressiveness Score', fontweight='bold')\n",
        "            ax.set_title(f'Competitive CTA Aggressiveness Rankings\\n{context.brand} Market Position', fontweight='bold', pad=20)\n",
        "            \n",
        "            # Add vertical line for market median\n",
        "            median_score = sorted_df['market_median_aggressiveness'].iloc[0]\n",
        "            ax.axvline(x=median_score, color='gray', linestyle='--', alpha=0.7, label=f'Market Median ({median_score:.1f})')\n",
        "            ax.legend()\n",
        "            \n",
        "            ax.grid(axis='x', alpha=0.3)\n",
        "            plt.tight_layout()\n",
        "            plt.show()\n",
        "            \n",
        "            print(f\"   ‚úÖ Generated 3 competitive intelligence visualizations\")\n",
        "            print(f\"   üìä Matrix plot, strategy distribution, and aggressiveness rankings complete\")\n",
        "        \n",
        "    except ImportError as e:\n",
        "        print(f\"   ‚ö†Ô∏è Visualization libraries not available: {e}\")\n",
        "        print(f\"   üí° Install with: pip install matplotlib seaborn\")\n",
        "    except Exception as e:\n",
        "        print(f\"   ‚ö†Ô∏è Error generating visualizations: {e}\")\n",
        "        print(f\"   üìä Continuing with text-based analysis...\")\n",
        "    \n",
        "    print(f\"\\nüéØ COMPETITIVE INTELLIGENCE SUMMARY COMPLETE\")\n",
        "    print(\"=\" * 70)\n",
        "    print(f\"‚úÖ Deep competitive analysis reveals quantified strategic insights\")\n",
        "    print(f\"üìä Brand positioning, creative fatigue, and copying threats analyzed\")\n",
        "    print(f\"üéØ Tactical recommendations generated from hard data\")\n",
        "    print(f\"üìà Data visualizations provide clear competitive context\")\n",
        "    \n",
        "else:\n",
        "    print(\"‚ùå Stage 8 results not available - run Stage 8 first\")"
    ]
}

# Find Stage 8 cell index
stage8_index = None
for i, cell in enumerate(notebook['cells']):
    if cell.get('cell_type') == 'code':
        source = ''.join(cell.get('source', []))
        if 'STAGE 8: STRATEGIC ANALYSIS' in source:
            stage8_index = i
            break

if stage8_index is not None:
    # Insert after Stage 8
    notebook['cells'].insert(stage8_index + 1, new_cell)
    print(f'‚úÖ Inserted comprehensive analysis cell after Stage 8 (index {stage8_index})')
else:
    # Append to end
    notebook['cells'].append(new_cell)
    print('‚úÖ Appended comprehensive analysis cell to end')

# Save notebook
with open('notebooks/demo_competitive_intelligence.ipynb', 'w') as f:
    json.dump(notebook, f, indent=1)

print('üéØ Comprehensive Stage 8 analysis cell added to notebook')
print('üìä New cell showcases competitive positioning, strategic recommendations, and business impact')